#!/usr/bin/env bash

set -e

cd "${0%/*}"

######################    GLOBAL VARS     ######################
compose_version="1.8.1"

exclude_context_file="./docker/exclude_context"

typeset -A composes
composes=(
  ["prod"]="./docker/production/docker-compose.yml"
  ["stag"]="./docker/staging/docker-compose.yml"
  ["dev"]="./docker/development/docker-compose.yml"
)

typeset -A droplets
droplets=(
  ["prod"]="core@46.101.173.249"
  ["stag"]="core@138.68.81.181"
)

# prod images are also used for staging
typeset -A images
images=(
  ["prod/nginx"]="./docker/production/nginx.dockerfile"
  ["prod/golang"]="./docker/production/go.dockerfile"
  ["dev/nginx"]="./docker/development/nginx.dockerfile"
  ["dev/golang"]="./docker/development/go.dockerfile"
  ["stag/nginx"]="./docker/production/nginx.dockerfile"
  ["stag/golang"]="./docker/production/go.dockerfile"
)

typeset -A builds_args
builds_args=(
  ["stag/nginx"]="--build-arg BUILD=stag"
)

typeset -A args
args=(
  ["build"]="build [tech,...] (prod|dev|stag)"
  ["push"]="push (images [tech,...]|compose) (prod|stag)"
  ["clean"]="clean [tech,...] (prod|dev|stag)"
  ["install_compose"]="install_compose (prod|stag)"
  ["compose"]="compose [command] (prod|dev|stag)"
  ["redo"]="redo [tech,...] (prod|dev|stag)"
)
###################### END OF GLOBAL VARS ######################

main() {
  if [[ $# -lt 1 || -z "${args[$1]}" ]]; then
    error
  fi

  "$1" "${@:2}"
}

build() {
  if [[ $# -lt 1 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  local machine="${@: -1}"

  if [[ $# -gt 1 ]]; then
    for tech in "${@:1:$(($#-1))}"; do
      local image="$machine/$tech"
      if [[ -z "${images["$image"]}" ]]; then
        1>&2 echo "${args[$FUNCNAME]}"
        1>&2 echo "Image, $image, does not exist"
        exit 1
      fi
    find . ! -path . -type f | grep -v -f "$exclude_context_file" | tar -cf - -T - | docker build -t "$image" -f "${images["$image"]}" ${builds_args["$image"]} -
    done
  else
    for image in "${!images[@]}"; do
      IFS='/' read -ra image_fields <<< "$image"
      if [[ "${image_fields[0]}" != "$machine" ]]; then continue; fi
      find . ! -path . -type f | grep -v -f "$exclude_context_file" | tar -cf - -T - | docker build -t "$image" -f "${images["$image"]}" ${builds_args["$image"]} -
    done
  fi

}

push() {
  if [[ $# -lt 2 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  local machine="${@: -1}"
  local droplet="${droplets[$machine]}"

  case "$1" in
    images)
      if [[ $# -eq 2 ]]; then
        for image in "${!images[@]}"; do
          IFS='/' read -ra image_fields <<< "$image"
          if [[ "${image_fields[0]}" != "$machine" ]]; then continue; fi
          docker save "$image" | xz | pv | ssh "$droplet" 'unxz | docker load'
        done
      else
        for tech in "${@:2:$((${#@}-2))}"; do
          local image="$machine/$tech"
          if [[ -z "${images["$image"]}" ]]; then
            1>&2 echo "${args[$FUNCNAME]}"
            1>&2 echo "Image, $image, does not exist"
            exit 1
          fi
          docker save "$image" | xz | pv | ssh "$droplet" 'unxz | docker load'
        done
      fi
      ;;
    compose)
      [[ $# -ne 2 ]] && 1>&2 echo "${args[$FUNCNAME]}" && exit 1
      local compose="${composes[$2]}"
      scp "$compose" "$droplet":~/"${compose##*/}"
      ;;
    *)
      1>&2 echo "${args[$FUNCNAME]}"
  esac
}

clean() {
  if [[ $# -lt 1 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  machine="${@: -1}"
  local cleanCommand='docker rm -f $(docker ps -q -a); docker rmi $(docker images -q)'

  case "$machine" in
    dev)
      eval "$cleanCommand" || true
      ;;
    *)
      if [[ $# -eq 1 ]]; then
        ssh "${droplets[$machine]}" "$cleanCommand" || true
      else
        for tech in "${@:1:$((${#@}-1))}"; do
          local image="$machine/$tech"
          local cleanCommand='docker rm -f $(docker ps -a -q --filter=ancestor="'$image'"); docker rmi "'$image'"'
          ssh "${droplets[$machine]}" "$cleanCommand" || true
        done
      fi
  esac
}

install_compose() {
  if [[ $# -ne 1 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  machine="$1"
  droplet="${droplets[$machine]}"
  if [[ -z "$droplet" ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    1>&2 echo "no droplet for $machine"
    exit 1
  fi

  ssh "$droplet" 'mkdir -p ~/bin && curl -L "https://github.com/docker/compose/releases/download/'"$compose_version"'/docker-compose-$(uname -s)-$(uname -m)" > $HOME/bin/docker-compose && chmod +x "$HOME/bin/docker-compose"'
}

compose() {
  if [[ $# -lt 1 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  local last_argument="${@: -1}"
  local compose="${composes[$last_argument]}"
  local compose_args=("${@:1:$(($#-1))}")

  case "$last_argument" in
    dev)
      docker-compose -f "$compose" "${compose_args[@]}"
      ;;
    *)
      for index in "${!compose_args[@]}"; do
        compose_args[$index]="\"${compose_args[$index]}\""
      done
      ssh "${droplets[$last_argument]}" "./bin/docker-compose -f ${compose##*/} ${compose_args[@]}"
  esac
}

redo() {
  if [[ $# -lt 1 ]]; then
    1>&2 echo "${args[$FUNCNAME]}"
    exit 1
  fi

  local machine="${@: -1}"
  if [[ $# -eq 2 ]]; then
    local tech="$1"
  fi

  case "$machine" in
    dev)
      compose down "$machine"
      clean "$tech" "$machine"
      build "$tech" "$machine"
      compose up "$machine"
      ;;
    *)
      compose down "$machine"
      if [[ $# -eq 1 ]]; then
        build "$machine"
        clean "$machine"
        push images "$machine"
        push compose "$machine"
      else
        for tech in "${@:1:$((${#@}-1))}"; do
          build "$tech" "$machine"
          clean "$tech" "$machine"
          push images "$tech" "$machine"
        done
      fi
      push compose "$machine"
      compose up "$machine"
      ;;
  esac
}

error() {
    for value in "${args[@]}"; do
      1>&2 echo -e "$value"
    done
    exit 1
}

main "$@"
