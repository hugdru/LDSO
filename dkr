#!/usr/bin/env bash

cd "${0%/*}"

prod_compose_file="./docker/production/docker-compose.yml"
dev_compose_file="./docker/development/docker-compose.yml"
droplet="core@46.101.173.249"
images_prod=("prod/golang" "prod/nginx")
composer_version="1.8.1"

main() {
  if [[ $# -lt 1 ]]; then
    1>&2 echo -e "$0 build (prod|dev)"
    1>&2 echo -e "$0 push (images|compose)"
    1>&2 echo -e "$0 clean (local|remote)"
    1>&2 echo -e "$0 install_docker_composer"
    1>&2 echo -e "$0 composer (prod|dev) [command]"
    exit 1
  fi

  case "$1" in
    build|push|clean|install_docker_composer|composer)
      "$1" "${@:2}"
      ;;
    *)
      1>&2 echo "Option doesnt exist"
      exit 1
  esac
}

build() {

  local error="$0 $FUNCNAME (prod|dev)"

  if [[ $# -ne 1 ]]; then
    1>&2 echo "$error"
    exit 1
  fi

  local improved_context="tar -cf - --exclude-ignore-recursive=./docker/exclude_docker_context . "

  case "$1" in
    prod)
      $improved_context | docker build -t prod/nginx -f ./docker/production/nginx.dockerfile -
      $improved_context | docker build -t prod/golang -f ./docker/production/go.dockerfile -
      ;;
    dev)
      $improved_context | docker build -t dev/nginx -f ./docker/development/nginx.dockerfile -
      $improved_context | docker build -t dev/golang -f ./docker/development/go.dockerfile -
      ;;
    *)
      1>&2 echo "$error"
  esac
}

push() {

  local error="$0 $FUNCNAME (images|compose)"

  if [[ $# -ne 1 ]]; then
    1>&2 echo "$error"
    exit 1
  fi

  case "$1" in
    images)
      for image_prod in "${images_prod[@]}"; do
        docker save "$image_prod" | xz -9 | pv | ssh "$droplet" 'unxz | docker load'
      done
      ;;
    compose)
      scp "$prod_compose_file" "$droplet":~/"${prod_compose_file##*/}"
      ;;
    *)
      1>&2 echo "$error"
  esac
}

clean() {

  local error="$0 $FUNCNAME (local|remote)"

  if [[ $# -ne 1 ]]; then
    1>&2 echo "$error"
    exit 1
  fi

  local clean_command='docker rm -f $(docker ps -q -a); docker rmi $(docker images -q)'
  case "$1" in
    remote)
      ssh "$droplet" "$clean_command"
      ;;
    local)
      eval "$clean_command"
      ;;
    *)
      1>&2 echo "$error"
      exit 1
  esac

}

install_docker_composer() {
  if [[ $# -ne 0 ]]; then
    1>&2 echo "$0 install_docker_composer"
    exit 1
  fi
  ssh "$droplet" 'curl -L "https://github.com/docker/compose/releases/download/'"$composer_version"'/docker-compose-$(uname -s)-$(uname -m)" > $HOME/bin/docker-compose && chmod +x "$HOME/bin/docker-compose"'
}

composer() {

  local error="$0 $FUNCNAME (prod|dev) [command]"

  if [[ $# -lt 1 ]]; then
    1>&2 echo "$error"
    exit 1
  fi

  case "$1" in
    prod)
      ssh "$droplet" "./bin/docker-compose -f ${prod_compose_file##*/} ${@:2}"
      ;;
    dev)
      docker-compose -f "$dev_compose_file" "${@:2}"
      ;;
    *)
      1>&2 echo "$error"
  esac
}


main "$@"
